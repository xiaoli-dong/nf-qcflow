/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    ]

    withName: FASTQC_INPUT {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/input/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: FASTQC_TRIMMED_WITH_BBDUK {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/bbduk/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: FASTQC_TRIMMED_WITH_FASTP {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/fastp/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: FASTQC_DEHOST {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/dehost/hostile/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:QCFLOW_.*:QC_ILLUMINA:SEQKIT_STATS_INPUT' {
        ext.prefix = { "${meta.id}.input_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/input" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:QCFLOW_.*:QC_NANOPORE:SEQKIT_STATS_INPUT' {
        ext.prefix = { "${meta.id}.input_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/input" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SEQKIT_STATS_TRIMMED_WITH_BBDUK {
        ext.prefix = { "${meta.id}.${params.illumina_reads_qc_tool}_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/bbduk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SEQKIT_STATS_TRIMMED_WITH_FASTP {
        ext.prefix = { "${meta.id}.${params.illumina_reads_qc_tool}_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:QCFLOW_.*:QC_ILLUMINA:SEQKIT_STATS_DEHOST' {
        ext.prefix = { "${meta.id}.dehost_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/dehost/hostile" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
     withName: '.*:QCFLOW_.*:QC_NANOPORE:SEQKIT_STATS_DEHOST' {
        ext.prefix = { "${meta.id}.dehost_seqstats" }
        ext.args = '--quiet -T'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/dehost/hostile" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: HOSTILE_CLEAN_ILLUMINA {
        ext.args = '--force --aligner bowtie2'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/dehost/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: BBMAP_BBDUK {
        ext.args = [
            "ref=adapters,artifacts,phix",
            "ktrim=r",
            "k=23",
            "mink=11",
            "hdist=1",
            "tpe",
            "tbo",
            "maq=15",
            "trimq=10",
            "qtrim=r",
            "minlength=31",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: FASTP {
        ext.args = [
            "--cut_front",
            "--cut_front_window_size=1",
            "--cut_front_mean_quality=10",
            "--cut_tail",
            "--cut_tail_window_size=1",
            "--cut_tail_mean_quality=10",
            "--n_base_limit 0",
            "--qualified_quality_phred 20",
            "--average_qual 20",
            "--length_required 50",
            "--detect_adapter_for_pe",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:QCFLOW_.*:QC_ILLUMINA:REPORT_QCSUMMARY' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
     withName: '.*:QCFLOW_.*:QC_NANOPORE:REPORT_QCSUMMARY' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*:QCFLOW_.*:QC_(ILLUMINA|NANOPORE):HTML_COPYDIR' {
        publishDir = [
            path: { "${params.outdir}/html_report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:QCFLOW_.*:QC_ILLUMINA:HTML_DATATABLE_CSV2JSON_QCREPORT' {
        ext.args = "--sep ,"
        publishDir = [
            path: { "${params.outdir}/html_report/illumina/data" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: '.*:QCFLOW_.*:QC_NANOPORE:HTML_DATATABLE_CSV2JSON_QCREPORT' {
        ext.args = "--sep ,"
        publishDir = [
            path: { "${params.outdir}/html_report/nanopore/data" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: '.*:QCFLOW_.*:QC_ILLUMINA:HTML_DATATABLE_CSV2JSON_TOPMATCHES' {
        ext.args = "--sep , --name topmatch_data --colname topmatch_tablecol"
        publishDir = [
            path: { "${params.outdir}/html_report/illumina/data" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: '.*:QCFLOW_.*:QC_NANOPORE:HTML_DATATABLE_CSV2JSON_TOPMATCHES' {
        ext.args = "--sep , --name topmatch_data --colname topmatch_tablecol"
        publishDir = [
            path: { "${params.outdir}/html_report/nanopore/data" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }

    withName: '.*:QCFLOW_.*:QC_ILLUMINA:KRAKEN2_KRAKEN2' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false,
        ]
    }
    withName: '.*:QCFLOW_.*:QC_NANOPORE:KRAKEN2_KRAKEN2' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false,
        ]
    }
    withName: '.*:QCFLOW_.*:QC_ILLUMINA:BRACKEN_BRACKEN' {
        ext.prefix = { { "${meta.id}.bracken" } }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: '.*:QCFLOW_.*:QC_NANOPORE:BRACKEN_BRACKEN' {
        ext.prefix = { { "${meta.id}.bracken" } }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName:  BRACKEN_COMBINEBRACKENOUTPUTS {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName:  '.*:QCFLOW_.*:QC_ILLUMINA:BRACKEN_GETTOPMATCHES' {
        ext.prefix = { { "${meta.id}.topmatches" } }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/illumina/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName:  '.*:QCFLOW_.*:QC_NANOPORE:BRACKEN_GETTOPMATCHES' {
        ext.prefix = { { "${meta.id}.topmatches" } }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/classify/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: NANOPLOT_INPUT {
        ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/input/nanoplot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: NANOPLOT_QC {
        ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/nanoplot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: PORECHOP_PORECHOP {
        ext.prefix = { "${meta.id}.porechop" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false,
        ]
    }
    withName: SEQKIT_STATS_PORECHOP {
        ext.prefix = { "${meta.id}.porechop_seqstats" }
        ext.args = '-T '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/porechop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: CHOPPER {
        ext.args2 = "-q 10 --minlength 200"
        ext.prefix = { "${meta.id}.chopper" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SEQKIT_STATS_CHOPPER {
        ext.prefix = { "${meta.id}.chopper_seqstats" }
        ext.args = '-T '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/chopper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    //dehost
    withName: HOSTILE_CLEAN_NANOPORE {
        ext.args = "--force --aligner-args '-ax map-ont'"
        ext.prefix = { "${meta.id}.dehost" }
        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/nanopore/dehost/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                pattern: '*/*',
                saveAs: { filename ->
                    filename == 'versions.yml' ? null : filename.replaceFirst(/^cleaned_reads\//, '')
                },
                enable: true,
            ],
            [
                path: { "${params.outdir}/${meta.id}/nanopore/dehost/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                pattern: '*.dehost.json',
                enable: true,
            ],
           /*  [
                path: { "${params.outdir}/qc_reads" },
                mode: params.publish_dir_mode,
                pattern: "cleaned_reads/*",
                enable: true,
                saveAs: { filename ->
                    filename == 'versions.yml' ? null : filename.replaceFirst(/^cleaned_reads\//, '')
                },
            ], */
        ]
    }
    withName: FASTPLONG {
        ext.args = "--mean_qual 10 -l 200"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SEQKIT_STATS_FASTPLONG {
        ext.prefix = { "${meta.id}.FASTPLONG_seqstats" }
        ext.args = '-T '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/nanopore/qc/FASTPLONG" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: CSVTK_CONCAT {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}
